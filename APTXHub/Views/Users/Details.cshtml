@model GetUserProfileVM

@{
    var defaultCoverPicture = "/images/placeholders/post-placeholder.jpg";
    var defaultUserPicture = "/images/avatar/user.png";
    var loggedInUserId = int.Parse(User.FindFirstValue(ClaimTypes.NameIdentifier)!);
}

<main id="site__main" class="2xl:ml-[--w-side]  xl:ml-[--w-side-sm] p-2.5 h-[calc(100vh-var(--m-top))] mt-[--m-top]">

    <div class="max-w-[1065px] mx-auto max-lg:-m-2.5 p-2 mt-10">
        <div class="box-dark-border bg-white shadow rounded-t-xl lg:-mt-10 overflow-hidden">

            @* Cover image *@
            <div class="relative w-full h-52 lg:h-96 overflow-hidden rounded-t-xl">
                <img src="@Url.Content(string.IsNullOrEmpty(Model.User.CoverPictureUrl)
                    ? defaultCoverPicture
                    : Model.User.CoverPictureUrl)"
                class="object-cover w-full h-full"
                alt="Cover Picture" />
            </div>


            <div class="relative overflow-hidden w-full lg:h-3 h-3"></div>
            <div class="p-3 flex flex-row items-center">
                <div class="flex-shrink-0 mr-4">
                    <div class="relative lg:h-40 lg:w-40 w-40 h-40">
                        <div class="relative overflow-hidden rounded-full md:border-[6px] border-gray-100 shrink-0 w-40 h-40">
                            <img src="@Url.Content(string.IsNullOrEmpty(Model.User.ProfilePictureUrl)
                                ? defaultUserPicture
                                : Model.User.ProfilePictureUrl)"
                            class="w-full h-full  dark:bg-white" />
                        </div>
                    </div>
                </div>
                <div class="ml-4">
                    <div class="gap-3 flex items-center md:text-4xl text-base font-bold text-black dark:text-white">
                        <span> @Model.User.FullName</span>

                        @* Verified badge *@
                        @if (Model.User.IsVerified) {
                            <div class="w-5 h-5 flex items-center justify-center rounded-full bg-blue-500">
                                <svg class="w-4 h-4 text-white" fill="currentColor" viewBox="0 0 20 20">
                                    <path fill-rule="evenodd" d="M16.707 5.293a1 1 0 00-1.414 0L8 12.586l-3.293-3.293a1 1 0 00-1.414 1.414l4 4a1 1 0 001.414 0l8-8a1 1 0 000-1.414z" clip-rule="evenodd" />
                                </svg>
                            </div>
                        }
                 
                        </div>
                    <p class="mt-2 text-gray-500 dark:text-gray">@Model.User.UserName</p>



                    @* ✨ Hiển thị bio tại đây *@
                    @if (!string.IsNullOrEmpty(Model.User.Bio))
                    {
                        <div class="mt-4 text-sm text-gray-600 gap-2 max-w-[550px] dark:text-white">

                            <p class="font-semibold text-15 flex gap-2">
                                <span>@Localizer["Bio"]</span>
                                <ion-icon name="document-text-outline" class="mt-0.5 text-base text-gray-400"></ion-icon>
                            </p>
                            <p class="text-14 mt-1 ">@Model.User.Bio</p>
                        </div>
                    }
                </div>

                <!-- 2 button addfr và message -->
                @if (Model.User.Id != loggedInUserId)
                {
                    <form class="ml-auto md:flex gap-2" asp-action="SendFriendRequest" asp-controller="Friends" method="post">
                        <input type="hidden" name="receiverId" value="@Model.User.Id" />

                        @if (Model.FriendshipStatus == "Accepted")
                        {
                            <button type="button" class="flex items-center gap-2 px-4 py-2 rounded-lg bg-green-500 font-semibold text-white text-base cursor-default">
                                <ion-icon name="checkmark-outline" class="text-lg"></ion-icon>
                                @Localizer["Friends"]
                            </button>
                        }
                        else if (Model.FriendshipStatus == "Pending")
                        {
                            <button type="button" class="flex items-center gap-2 px-4 py-2 rounded-lg bg-yellow-500 font-semibold text-white text-base cursor-default">
                                <ion-icon name="hourglass-outline" class="text-lg"></ion-icon>
                                @Localizer["RequestSent"]
                            </button>
                        }
                        else
                        {
                            <button type="submit" class="flex items-center gap-2 px-4 py-2 rounded-lg bg-blue-600 font-semibold text-white text-base hover:bg-blue-700 transition">
                                <ion-icon name="person-add-outline" class="text-lg"></ion-icon>
                               @Localizer["AddFriend"]
                            </button>
                        }

                        <!-- Message button -->
                        @if (Model.FriendshipStatus == "Accepted") {
                            <a asp-controller="Messages" asp-action="Chat" asp-route-userId="@Model.User.Id"
                               class=" mt-2 md:mt-0 flex items-center gap-2 px-4 py-2 rounded-lg bg-gray-200 font-semibold text-black text-base hover:bg-gray-300 transition">
                                <ion-icon name="chatbubble-ellipses-outline" class="text-lg"></ion-icon>
                                @Localizer["Message"]
                            </a>
                        }
                       
                    </form>
                }
            </div>

        </div>
        <div class="flex 2xl:gap-12 gap-10 mt-8 max-lg:flex-col" id="js-oversized">
            <div class="flex-1 xl:space-y-6 space-y-3">

                @* Show posts by user *@
                @foreach (var post in Model.Posts)
                {
                    <partial name="Home/_Post" model="post"
                             view-data='new ViewDataDictionary(ViewData)
                            {
                                { "ShowAllComment", false },
                                {"ShowDetails", false }
                            }' />
                }

            </div>
            <div class="lg:w-[400px]">
                <div class="lg:space-y-4 lg:pb-8 max-lg:grid sm:grid-cols-2 max-lg:gap-6"
                     uk-sticky="media: 1024; end: #js-oversized; offset: 80">
                    <div class="box p-5 px-6 box-dark-border">
                        <div class="flex items-ce justify-between text-black">

                            <h3 class="font-bold text-lg dark:text-white">
                                @Localizer["Friends"]
                                <span class="block text-base text-gray-500 mt-0. font-normal dark:text-gray"> @Model.Friends.Count @Localizer["Friends"]</span>
                            </h3>

                        </div>

                        <div class="grid grid-cols-3 gap-2 gap-y-5 text-center text-sm mt-4 mb-2">

                            @foreach (var friend in Model.Friends)
                            {
                                <a asp-controller="Users" asp-action="Details" asp-route-userId="@friend.Id"
                                   class="card shadow bor p-2 dark:bg-gray">
                                    <div class="relative w-full aspect-square rounded-lg overflow-hidden">
                                        <img src="@Url.Content(string.IsNullOrEmpty(friend.ProfilePictureUrl)
                                                    ? "/images/avatar/user.png"
                                                    : friend.ProfilePictureUrl)"
                                             class="object-cover w-full h-full inset-0" />
                                    </div>
                                    <div class="mt-2 line-clamp-1 font-semibold text-14 dark:text-white">@friend.FullName</div>
                                </a>

                            }
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

</main>