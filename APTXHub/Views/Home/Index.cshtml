@model List<Post>

<main id="site__main" class="2xl:ml-[--w-side]  xl:ml-[--w-side-sm] p-2.5 h-[calc(100vh-var(--m-top))] mt-[--m-top]">
    <div class="lg:flex 2xl:gap-16 gap-12 max-w-[1170px] mx-auto" id="js-oversized">
        @* Main content *@
        <div class="max-w-[680px] mx-auto flex-1">

            @* Stories - Views\Shared\Components\Stories\Default.cshtml *@
            @await Component.InvokeAsync("Stories")

            @* Create Status && Show all post *@
            <div class="md:max-w-[580px] mx-auto flex-1 xl:space-y-6 space-y-3">

                <div class="box-dark-border bg-white rounded-xl shadow-sm md:p-4 p-2 space-y-4 text-sm font-medium border1">
                    <div class="flex items-center md:gap-3 gap-1">
                        <div class="flex-1 bg-slate-100 hover:bg-opacity-80 transition-all rounded-lg cursor-pointer" uk-toggle="target: #create-status">
                            <div class="py-2.5 text-center dark:bg-gray dark:text-white rounded">@Localizer["WhatOnYourMind"]</div>
                        </div>
                        <div class="cursor-pointer hover:bg-opacity-80 p-1 px-1.5 rounded-xl transition-all bg-pink-100/60 hover:bg-pink-100" uk-toggle="target: #create-status">
                            <svg xmlns="http://www.w3.org/2000/svg" class="w-8 h-8 stroke-pink-600 fill-pink-200/70" viewBox="0 0 24 24" stroke-width="1.5" stroke="#2c3e50" fill="none" stroke-linecap="round" stroke-linejoin="round">
                                <path stroke="none" d="M0 0h24v24H0z" fill="none" />
                                <path d="M15 8h.01" />
                                <path d="M12 3c7.2 0 9 1.8 9 9s-1.8 9 -9 9s-9 -1.8 -9 -9s1.8 -9 9 -9z" />
                                <path d="M3.5 15.5l4.5 -4.5c.928 -.893 2.072 -.893 3 0l5 5" />
                                <path d="M14 14l1 -1c.928 -.893 2.072 -.893 3 0l2.5 2.5" />
                            </svg>
                        </div>
                    </div>
                </div>

                <div id="posts-container" class="space-y-4">

                    @if (Model.Count == 0)
                    {
                        <div class="bg-white rounded-xl shadow-sm md:p-4 p-2 space-y-4 text-sm font-medium border1" style="width: 580px;">
                            @Localizer["NoPostCreated"]
                        </div>
                    }
                    else
                    {
                        @foreach (var post in Model)
                        {
                            <partial name="Home/_Post"
                                     model="post"
                                     view-data='new ViewDataDictionary(ViewData) { { "ShowAllComment", false } }' />
                        }
                    }
                </div>

            </div>

        </div>
        <div class="lg:w-[360px]  lg:block lg:overflow-visible ">
            <div class="mt-3 lg:space-y-4 lg:pb-8 max-lg:grid sm:grid-cols-2 max-lg:gap-6">
                <div class="box p-5 px-6 dark:bg-secondary box-dark-border">
                    @await Component.InvokeAsync("SuggestedFriends")
                </div>
                <div class="box p-5 px-6 dark:bg-secondary box-dark-border">
                    @await Component.InvokeAsync("Hashtags")
                </div>
            </div>

        </div>
    </div>
</main>

<partial name="Modals/_CreateStory" model="new StoryVM()"></partial>
<partial name="Modals/_CreateStatus" model="new PostVM()"></partial>
<partial name="Home/_PostDeleteConfirm" />



<script>
      // Handle when delete post - comfirm dialog
    function openPostDeleteConfirmation(postId, button) {
        // Lấy dropdown gần nhất với nút vừa click
        const dropdown = button.closest('.uk-dropdown');
        if (dropdown) {
            UIkit.dropdown(dropdown).hide();
        }
        // Gán postId vào form modal
        document.getElementById('deleteConfirmationPostId').value = postId;

        // Hiện modal xác nhận xóa
        UIkit.modal('#postDeleteDialog').show();
    }

    document.addEventListener('DOMContentLoaded', function () {

        // HANDLE WHEN LIKE AND FAVORITE POST
        document.getElementById('posts-container').addEventListener('click', function (event) {

            const button = event.target.closest('.like-button, .favorite-button');
            if (button) {
                event.preventDefault();

                var form = button.closest('form');
                var postId = form.querySelector('input[name="postId"]').value;
                var postContainer = document.getElementById('post-' + postId);

                fetch(form.action, {
                    method: 'POST',
                    body: new FormData(form),
                    headers: {}
                })
                    .then(response => response.text())
                    .then(html => {
                        postContainer.innerHTML = html;
                    })
                    .catch(error => console.error('Error: ', error));
            }
        })

        // HANDLE WHEN ADD AND REMOVE COMMENT
        document.getElementById('posts-container').addEventListener('submit', function (event) {
            var form = event.target;

            // Add comment
            if (form.classList.contains('add-comment-form')) {
                event.preventDefault();

                var postId = form.querySelector('input[name="postId"]').value;
                var textarea = document.getElementById('commentContent-' + postId);
                var content = textarea.value.trim();
                if (!content) {
                    alert('Bạn chưa nhập nội dung bình luận!');
                    textarea.focus();
                    return;
                }

                var postContainer = document.getElementById('post-' + postId);

                fetch(form.action, {
                    method: 'POST',
                    body: new FormData(form),
                })
                    .then(response => response.text())
                    .then(html => {
                        postContainer.innerHTML = html;
                    })
                    .catch(error => console.error('Error: ', error));
            }

            // Remove comment
            if (form.classList.contains('remove-comment-form')) {
                event.preventDefault();

                const isConfirmed = confirm("Are you sure you want to delete this comment?");
                if (!isConfirmed) return;

                var postId = form.querySelector('input[name="postId"]').value;
                var postContainer = document.getElementById('post-' + postId);

                fetch(form.action, {
                    method: 'POST',
                    body: new FormData(form),
                })
                    .then(response => response.text())
                    .then(html => {
                        postContainer.innerHTML = html;
                    })
                    .catch(error => console.error('Error: ', error));
            }
        });



    })

</script>