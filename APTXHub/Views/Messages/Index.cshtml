@model InboxVM

<main id="site__main" class="2xl:ml-[--w-side] xl:ml-[--w-side-sm] p-4 h-[calc(100vh-var(--m-top))] mt-60px flex justify-center">
    <div class="box-dark-border shadow-lg w-full max-w-[1065px] h-[85vh] bg-white dark:bg-gray-900 rounded-xl shadow-lg border border-gray-200 dark:border-gray-700 flex overflow-hidden">
        <!-- Sidebar danh sách -->
        <div class="w-1/3 border-r border-gray-200 d-border-gray-50 overflow-y-auto bg-gray-50 dark:bg-gray-800">
            @foreach (var msg in Model.Conversations)
            {
                var user = msg.SenderId == Model.CurrentUser.Id ? msg.Receiver : msg.Sender;
                var avatar = string.IsNullOrEmpty(user.ProfilePictureUrl) ? "/images/avatar/user.png" : user.ProfilePictureUrl;
                <a href="@Url.Action("Index", new { chatWithUserId = user.Id })" class="flex items-center gap-3 p-4 hover:bg-gray-100 btn-danger-hover transition-colors">
                    <img src="@avatar" class="w-10 h-10 rounded-full border dark:border-gray-600" alt="@user.FullName" />
                    <div class="flex-1">
                        <div class="flex justify-between">
                            <div class="font-semibold text-gray-800 dark:text-white">@user.FullName</div>
                            <div class="text-xs text-gray-500 dark:text-gray">@msg.SentAt.ToLocalTime().ToString("hh:mm tt")</div>
                        </div>
                        <div class="text-sm text-gray-500 dark:text-gray line-clamp-1">@msg.Content</div>
                    </div>
                </a>
            }
        </div>

        <!-- Khung chat -->
        <div class="w-2/3 flex flex-col">
            @if (Model.TargetUser != null)
            {
                var targetAvatar = string.IsNullOrEmpty(Model.TargetUser.ProfilePictureUrl) ? "/images/avatar/user.png" : Model.TargetUser.ProfilePictureUrl;
                <div class="dark:bg-secondary p-4 border-b border-gray-200  bg-white d-border-gray-50 flex items-center gap-3">
                    <img src="@targetAvatar" class="w-12 h-12 rounded-full border dark:border-gray-600" alt="@Model.TargetUser.FullName" />
                    <div class="font-semibold text-gray-800 dark:text-white">Đang trò chuyện với @Model.TargetUser.FullName</div>
                </div>
                <div id="chat-messages" class="flex-1 p-4 overflow-y-auto bg-gray-50 dark:bg-gray-800 space-y-4">
                    @foreach (var m in Model.Messages)
                    {
                        var isMe = m.SenderId == Model.CurrentUser.Id;
                        var user = isMe ? Model.CurrentUser : Model.TargetUser;
                        var avatar = string.IsNullOrEmpty(user.ProfilePictureUrl) ? "/images/avatar/user.png" : user.ProfilePictureUrl;
                        <div class="flex @(isMe ? "justify-end" : "justify-start") items-start gap-2">
                            @if (!isMe)
                            {
                                <img src="@avatar" class="w-12 h-12 rounded-full border dark:bg-white" alt="@user.FullName" />
                            }
                            <div class="max-w-70percent">
                                <div class="dark:text-white text-14 text-gray-500 dark:text-gray-400 font-medium mb-1 @(isMe ? "text-right" : "text-left")">@user.FullName</div>
                                <div class="text-14 px-3 py-2 rounded-lg text-sm leading-relaxed @(isMe ? "bg-blue-500 text-white" : "bg-gray-200 text-gray-800")">
                                    @m.Content
                                </div>
                                <div class="text-sm text-gray-400 mt-1 @(isMe ? "text-right" : "text-left")">@m.SentAt.ToLocalTime().ToString("hh:mm tt")</div>
                            </div>
                            @if (isMe)
                            {
                                <img src="@avatar" class="w-12 h-12 rounded-full border dark:border-gray-600" alt="@user.FullName" />
                            }
                        </div>
                    }
                </div>
                <form id="chat-form" class="dark:bg-secondary p-4 border-t border-gray-200 dark:border-gray-700 flex items-center gap-2 bg-white dark:bg-gray-900">
                    <input type="text" id="message-input" class="text-14 d-text-black flex-grow p-2 rounded-lg border border-gray-300 dark:border-gray-700 bg-white dark:bg-gray-900 text-gray-800 dark:text-white text-base focus:outline-none focus:ring-2 focus:ring-blue-500"
                           placeholder="Nhập tin nhắn..." autocomplete="off" required />
                    <button type="submit" class="px-4 py-2 bg-blue-500 hover:bg-blue-600 text-white font-medium rounded-lg transition">
                        Gửi
                    </button>
                </form>
            }
            else
            {
                <div class="flex-1 flex items-center justify-center text-gray-500 dark:text-gray-400">Chọn một người để bắt đầu trò chuyện</div>
            }
        </div>
    </div>
</main>

@section Scripts {
    <script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/7.0.5/signalr.min.js"></script>
    <script>
        const senderId = '@Model.CurrentUser.Id';
        const receiverId = '@Model.TargetUser?.Id';
        const defaultAvatar = '/images/avatar/user.png';

        if (receiverId) {
            const groupName = 'chat_' + [senderId, receiverId].sort().join('_');
            const currentUser = {
                id: senderId,
                name: '@Model.CurrentUser.FullName',
                avatar: '@(string.IsNullOrEmpty(Model.CurrentUser.ProfilePictureUrl) ? "/images/avatar/user.png" : Model.CurrentUser.ProfilePictureUrl)'
            };
            const targetUser = {
                id: receiverId,
                name: '@Model.TargetUser?.FullName',
                avatar: '@(string.IsNullOrEmpty(Model.TargetUser?.ProfilePictureUrl) ? "/images/avatar/user.png" : Model.TargetUser?.ProfilePictureUrl)'
            };

            const connection = new signalR.HubConnectionBuilder().withUrl("/chatHub").build();

            connection.on("ReceiveMessage", function (fromUserId, message) {
                const isMe = fromUserId === senderId;
                const user = isMe ? currentUser : targetUser;
                const html = `
                    <div class="flex ${isMe ? "justify-end" : "justify-start"} items-start gap-2 mb-2">
                        ${!isMe ? `<img src="${user.avatar}" class="w-8 h-8 rounded-full border" alt="${user.name}" />` : ""}
                        <div class="max-w-[70%]">
                            <div class="text-xs text-gray-500 font-medium mb-1 ${isMe ? "text-right" : "text-left"}">${user.name}</div>
                            <div class="px-3 py-2 rounded-lg text-sm leading-relaxed ${isMe ? "bg-blue-500 text-white" : "bg-gray-200 text-gray-800"}">
                                ${message}
                            </div>
                            <div class="text-xs text-gray-400 mt-1 ${isMe ? "text-right" : "text-left"}">${new Date().toLocaleTimeString()}</div>
                        </div>
                        ${isMe ? `<img src="${user.avatar}" class="w-8 h-8 rounded-full border" alt="${user.name}" />` : ""}
                    </div>`;
                const container = document.getElementById("chat-messages");
                container.insertAdjacentHTML("beforeend", html);
                container.scrollTop = container.scrollHeight;
            });

            connection.start().then(() => {
                connection.invoke("JoinChatGroup", senderId, receiverId);
                document.getElementById("chat-form").addEventListener("submit", function (e) {
                    e.preventDefault();
                    const message = document.getElementById("message-input").value.trim();
                    if (!message) return;
                    connection.invoke("SendMessage", senderId, receiverId, message);
                    document.getElementById("message-input").value = "";
                });

                // Auto-scroll to bottom on load
                const container = document.getElementById("chat-messages");
                container.scrollTop = container.scrollHeight;
            }).catch(err => console.error(err));
        }
    </script>
}