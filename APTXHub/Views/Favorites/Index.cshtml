@model List<Post>



<main id="site__main" class="2xl:ml-[--w-side]  xl:ml-[--w-side-sm] p-2.5 h-[calc(100vh-var(--m-top))] mt-[--m-top]">
    <div class="lg:flex 2xl:gap-16 gap-12 max-w-[1065px] mx-auto" id="js-oversized">
        <div class="max-w-[680px] mx-auto">

            <div class="md:max-w-[580px] mx-auto flex-1 xl:space-y-6 space-y-3" id="posts-container">

                @if (Model.Count == 0)
                {
                    <div class="box-dark-border dark:text-white text-center bg-white rounded-xl shadow-sm md:p-4 p-2 space-y-4 text-lg font-medium border1" >
                        <p>Currently, there are no favorited posts available.</p>
                        <ion-icon name="sad-outline" class="text-4xl"></ion-icon>
                    </div>
                }
                else
                {
                     <div class="box-dark-border dark:text-white  bg-white text-center rounded-xl shadow-sm md:p-4 p-2 space-y-4 text-xl font-medium border1" > 
                         Your favorite posts 
                     </div> 
                    
                    @foreach (var post in Model)
                    {
                        <partial name="Home/_Post"
                            model="post" 
                            view-data='new ViewDataDictionary(ViewData) { { "ShowAllComment", false } }' />
                    }
                }
            </div>
        </div>
        <div class="lg:w-[360px]  lg:block lg:overflow-visible ">
            <div class="mt-3 lg:space-y-4 lg:pb-8 max-lg:grid sm:grid-cols-2 max-lg:gap-6">
                <div class="box p-5 px-6 dark:bg-secondary box-dark-border">
                    @await Component.InvokeAsync("SuggestedFriends")
                </div>
                <div class="box p-5 px-6 dark:bg-secondary box-dark-border">
                    @await Component.InvokeAsync("Hashtags")
                </div>
            </div>
        </div>
    </div>
</main>

        
<script>
      // Handle when delete post - comfirm dialog
    function openPostDeleteConfirmation(postId, button) {
        // Lấy dropdown gần nhất với nút vừa click
        const dropdown = button.closest('.uk-dropdown');
        if (dropdown) {
            UIkit.dropdown(dropdown).hide();
        }
        // Gán postId vào form modal
        document.getElementById('deleteConfirmationPostId').value = postId;

        // Hiện modal xác nhận xóa
        UIkit.modal('#postDeleteDialog').show();
    }

    document.addEventListener('DOMContentLoaded', function () {

        // HANDLE WHEN LIKE AND FAVORITE POST
        document.getElementById('posts-container').addEventListener('click', function (event) {

            const button = event.target.closest('.like-button, .favorite-button');
            if (button) {
                event.preventDefault();

                var form = button.closest('form');
                var postId = form.querySelector('input[name="postId"]').value;
                var postContainer = document.getElementById('post-' + postId);

                fetch(form.action, {
                    method: 'POST',
                    body: new FormData(form),
                    headers: {}
                })
                    .then(response => response.text())
                    .then(html => {
                        postContainer.innerHTML = html;
                    })
                    .catch(error => console.error('Error: ', error));
            }
        })

        // HANDLE WHEN ADD AND REMOVE COMMENT
        document.getElementById('posts-container').addEventListener('submit', function (event) {
            var form = event.target;

            // Add comment
            if (form.classList.contains('add-comment-form')) {
                event.preventDefault();

                var postId = form.querySelector('input[name="postId"]').value;
                var textarea = document.getElementById('commentContent-' + postId);
                var content = textarea.value.trim();
                if (!content) {
                    alert('Bạn chưa nhập nội dung bình luận!');
                    textarea.focus();
                    return;
                }

                var postContainer = document.getElementById('post-' + postId);

                fetch(form.action, {
                    method: 'POST',
                    body: new FormData(form),
                })
                    .then(response => response.text())
                    .then(html => {
                        postContainer.innerHTML = html;
                    })
                    .catch(error => console.error('Error: ', error));
            }

            // Remove comment
            if (form.classList.contains('remove-comment-form')) {
                event.preventDefault();

                var postId = form.querySelector('input[name="postId"]').value;
                var postContainer = document.getElementById('post-' + postId);

                fetch(form.action, {
                    method: 'POST',
                    body: new FormData(form),
                })
                    .then(response => response.text())
                    .then(html => {
                        postContainer.innerHTML = html;
                    })
                    .catch(error => console.error('Error: ', error));
            }
        });
    })

</script>